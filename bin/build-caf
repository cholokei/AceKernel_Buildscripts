#!/bin/bash

###############################################################################
# Qualcomm MSM CAF Kernel build script by Cholokei - leesl0416@naver.com      #
###############################################################################

DEVICE="$1"
THREADS="$2"

# Colorize and add text parameters
red=$(tput setaf 1)             #  red
grn=$(tput setaf 2)             #  green
ylw=$(tput setaf 3)             #  yellow
blu=$(tput setaf 4)             #  blue
ppl=$(tput setaf 5)             #  purple
cya=$(tput setaf 6)             #  cyan
txtbld=$(tput bold)             #  Bold
bldred=${txtbld}$(tput setaf 1) #  red
bldgrn=${txtbld}$(tput setaf 2) #  green
bldylw=${txtbld}$(tput setaf 3) #  yellow
bldblu=${txtbld}$(tput setaf 4) #  blue
bldppl=${txtbld}$(tput setaf 5) #  purple
bldcya=${txtbld}$(tput setaf 6) #  cyan
txtrst=$(tput sgr0)             #  Reset

# system compiler
export PATH=$HOME/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6/bin:$PATH
export ARCH=arm
export SUBARCH=arm
export CROSS_COMPILE=arm-eabi-

# number of cpus
#export NUMBEROFCPUS=128

NUMBEROFCPUS=$(cat /proc/cpuinfo | grep "^processor" | wc -l)
#THREADS=$(expr ${NUMBEROFCPUS} \* 64)

# location
export KERNELDIR=`readlink -f .`
export OUTDIR=`readlink -f ..`
export READY_KERNEL="CAF_KERNEL"
export MODULES=`find -name *.ko`

export KERNEL_NAME="3.4-kernel"
export BUILD_DATE=$(date +"%Y%m%d")
export BUILD_TIME=$(date +"%H%M")

#
# $HOME/bin/${KERNEL_NAME}/ramdisk_"$DEVICE".gz
# $HOME/bin/${KERNEL_NAME}/mkbootimg
# $HOME/bin/${KERNEL_NAME}/update-binary
# $HOME/bin/${KERNEL_NAME}/updater-script_"$MODEL"
#

KERNEL_VERSION=$(cat ${KERNELDIR}/Makefile | grep '^VERSION = *' | sed 's/VERSION = //g')
KERNEL_PATCHLEVEL=$(cat ${KERNELDIR}/Makefile | grep '^PATCHLEVEL = *' | sed 's/PATCHLEVEL = //g')
KERNEL_SUBLEVEL=$(cat ${KERNELDIR}/Makefile | grep '^SUBLEVEL = *' | sed 's/SUBLEVEL = //g')

if [ "$DEVICE" == "dalikt" ]
then
	MODEL=dalikt
	#KERNEL_CMDLINE="androidboot.hardware=qcom kgsl.mmutype=gpummu vmalloc=400M usb_id_pin_rework=true"
	#KERNEL_CMDLINE="androidboot.hardware=qcom usb_id_pin_rework=true no_console_suspend=true zcache"
	KERNEL_BASE=0x48000000
	KERNEL_PAGESIZE=2048
	KERNEL_RAMDISKADDR=0x49400000
elif [ "$DEVICE" == "dalilgt" ]
then
	MODEL=SHV-E120L
elif [ "$DEVICE" == "daliskt" ]
then
	MODEL=SHV-E120S
elif [ "$DEVICE" == "quincykt" ]
then
	MODEL=SHV-E160K
elif [ "$DEVICE" == "quincylgt" ]
then
	MODEL=SHV-E160L
elif [ "$DEVICE" == "quincyskt" ]
then
	MODEL=SHV-E160S
elif [ "$DEVICE" == "celoxskt" ]
then
	MODEL=SHV-E110S
else
	echo -e "${bldred}Can't find device code name ${txtrst}"
	exit 0
fi

KERNEL_CONFIG="caf_"$DEVICE"_defconfig"
MAKE="make -j"$THREADS""

# make directory for compiling output
if [ -e ${OUTDIR}/${READY_KERNEL} ]; then
	echo "${bldylw}OUTPUT=${OUTDIR}/${READY_KERNEL} ${txtrst}"
else
	cd ${OUTDIR}; mkdir ${READY_KERNEL}
	echo "${bldylw}OUTPUT=${OUTDIR}/${READY_KERNEL} ${txtrst}"
fi;

# remove previous zImage files
cd ${KERNELDIR}
if [ -e ${KERNELDIR}/arch/arm/boot/zImage ]; then
	rm ${KERNELDIR}/arch/arm/boot/zImage
fi;

# remove all old modules before compile
cd ${KERNELDIR}
for i in $MODULES; do
	rm -f $i
done;

echo -e "${bldred}Removed old zImage and modules ${txtrst}"

# remove old defconfig
if [ -e ${KERNELDIR}/.config ]; then
	rm ${KERNELDIR}/.config
	echo -e "${bldred}Removed old configuration ${txtrst}"
fi;

# clean
#nice -n 10 make mrproper

# get time of startup
time1=$(date +%s.%N)

echo -e ">>> ${bldgrn}${KERNEL_CONFIG} ${txtrst}"
make ${KERNEL_CONFIG}

echo -e "${bldgrn}Starting Qualcomm MSM CAF Kernel compilation for "$MODEL"("$DEVICE") ${txtrst}"
echo -e "${bldylw}Linux Kernel "$KERNEL_VERSION"."$KERNEL_PATCHLEVEL"."$KERNEL_SUBLEVEL" ${txtrst}"

# start compiling kernel, outputting the compile log
script -q ${OUTDIR}/${READY_KERNEL}/compile_${BUILD_DATE}-${BUILD_TIME}.log -c "
$MAKE"

if [ -e ${KERNELDIR}/arch/arm/boot/zImage ]; then
	echo -e "${bldgrn}Qualcomm MSM CAF Kernel for "$DEVICE" compiled sucessfully! ${txtrst}"
	cd ${OUTDIR}/${READY_KERNEL}
	mkdir "$MODEL"_${BUILD_DATE}-${BUILD_TIME}
	cd ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}
	cp ${KERNELDIR}/arch/arm/boot/zImage ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/zImage
	cd ${KERNELDIR}; find -name "*.ko" -exec cp {} ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME} \;
	cp ${KERNELDIR}/.config ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/config
else
	echo -e "${bldred}Failed to compile kernel! ${txtrst}"
fi;

if [ -e ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/zImage -a -e $HOME/bin/${KERNEL_NAME}/ramdisk_"$DEVICE".gz -a -e $HOME/bin/${KERNEL_NAME}/mkbootimg ]; then
	cp $HOME/bin/${KERNEL_NAME}/ramdisk_"$DEVICE".gz ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/ramdisk.gz
	cp $HOME/bin/${KERNEL_NAME}/mkbootimg ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/mkbootimg
	cd ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}
	chmod 777 mkbootimg

if [ "$DEVICE" == "dalikt" ]
then
	./mkbootimg --kernel zImage --ramdisk ramdisk.gz --cmdline "androidboot.hardware=qcom usb_id_pin_rework=true no_console_suspend=true zcache" --base 0x48000000 --pagesize 2048 --ramdiskaddr 0x49400000 -o boot.img
#elif [ "$DEVICE" == "dalilgt" ]
#then
#
#elif [ "$DEVICE" == "daliskt" ]
#then
#
#elif [ "$DEVICE" == "quincykt" ]
#then
#
#elif [ "$DEVICE" == "quincylgt" ]
#then
#
#elif [ "$DEVICE" == "quincyskt" ]
#then
#
#elif [ "$DEVICE" == "celoxskt" ]
#then
#
else
	echo -e "${bldred}Can't find device code name ${txtrst}"
fi

	rm -rf mkbootimg
	rm -rf ramdisk.gz
fi;

if [ -e ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/boot.img -a -e $HOME/bin/${KERNEL_NAME}/update-binary -a -e $HOME/bin/${KERNEL_NAME}/updater-script_"$MODEL" ]; then
	cd ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}
	mkdir tmp; cd tmp; mkdir META-INF; cd META-INF; mkdir com; cd com; mkdir google; cd google; mkdir android; cd ../../..; mkdir system; cd system; mkdir lib; cd lib; mkdir modules	
	cp $HOME/bin/${KERNEL_NAME}/update-binary ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/tmp/META-INF/com/google/android/update-binary
	cp $HOME/bin/${KERNEL_NAME}/updater-script_"$MODEL" ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/tmp/META-INF/com/google/android/updater-script
	cd ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}
	find -name "*.ko" \! -path "/tmp/*" -exec cp {} ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/tmp/system/lib/modules \;
	cp ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/boot.img ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/tmp/boot.img
	cd ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/tmp
	zip ${KERNEL_NAME}-${BUILD_DATE}-"$MODEL".zip -r META-INF/* system/* boot.img
	tar cvf ${KERNEL_NAME}-${BUILD_DATE}-"$MODEL".tar boot.img
	mv ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/tmp/${KERNEL_NAME}-${BUILD_DATE}-"$MODEL".zip ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/${KERNEL_NAME}-${BUILD_DATE}-"$MODEL".zip
	mv ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/tmp/${KERNEL_NAME}-${BUILD_DATE}-"$MODEL".tar ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}/${KERNEL_NAME}-${BUILD_DATE}-"$MODEL".tar
	cd ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME}; rm -rf tmp
fi;

if [ -e ${KERNELDIR}/arch/arm/boot/zImage ]; then
	echo -e "${bldylw}Now you can find all build result objects in ${OUTDIR}/${READY_KERNEL}/"$MODEL"_${BUILD_DATE}-${BUILD_TIME} ${txtrst}"
fi;

cd ${KERNELDIR}

time2=$(date +%s.%N)

echo "${bldcya}Total time elapsed: ${txtrst}${bldcya}$(echo "($time2 - $time1) / 60"|bc ) minutes ($(echo "$time2 - $time1"|bc ) seconds) ${txtrst}"
